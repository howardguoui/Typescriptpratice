{"version":3,"sources":["../src/app.ts"],"names":[],"mappings":";AAoaA,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,MAAA,EAAA,KAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,IAAA,EAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,IAxZK,EAwZL,EAAA,MAAA,KAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,EAAA,GAAA,YAAA,oBAAA,QAAA,YAAA,EAAA,WAAA,mBAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,GAAA,OAAA,EAAA,GAAA,GAAA,OAAA,eAAA,EAAA,EAAA,GAAA,IAxZA,SAAK,GACH,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,SAAA,GAAA,WAFF,CAAK,IAAA,EAAa,KAKZ,IAAA,EACJ,EAAA,SACS,EAAA,EACA,EACA,EACA,EACA,GAAqB,EAAA,KAAA,GAJrB,KAAA,GAAA,EACA,KAAA,MAAA,EACA,KAAA,YAAA,EACA,KAAA,OAAA,EACA,KAAA,OAAA,IAOL,EAAA,WAAN,SAAA,IAAA,EAAA,KAAA,GACY,KAAA,UAA2B,GAqYvC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAnYE,MAAA,SAAY,GACL,KAAA,UAAU,KAAK,OAkYxB,EAtYM,GAOA,EAAA,SAAA,GA+XN,EAAA,EA/X2B,GA+X3B,IAAA,EAAA,EAAA,GA3XE,SAAA,IAAA,IAAA,EAAA,OAAA,EAAA,KAAA,IACE,EAAA,EAAA,KAAA,OAJM,SAAsB,GAG9B,EA2XF,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aA/WE,MAAA,SAAW,EAAe,EAAqB,GACvC,IAAA,EAAa,IAAI,EACrB,KAAK,SAAS,WACd,EACA,EACA,EACA,EAAc,QAEX,KAAA,SAAS,KAAK,GAId,KAAA,oBAmWT,CAAA,IAAA,cAhWE,MAAA,SAAY,EAAmB,GACvB,IAAA,EAAU,KAAK,SAAS,KAAK,SAAA,GAAO,OAAA,EAAI,KAAO,IACjD,GAAW,EAAQ,SAAW,IAChC,EAAQ,OAAS,EACZ,KAAA,qBA4VX,CAAA,IAAA,kBAxVU,MAAA,WACmB,IADJ,EACI,EAAA,EAAA,KAAK,WADT,IACoB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,EACvC,EADuC,EAAA,OAC5B,KAAK,SAAS,UAFN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,QAwVzB,CAAA,CAAA,IAAA,cAvXE,MAAA,WACM,OAAA,KAAK,SACA,KAAK,UAET,KAAA,SAAW,IAAI,EACb,KAAK,cAkXhB,EA/XM,GA6CA,EAAe,EAAa,cAWlC,SAAS,EAAS,GACZ,IAAA,GAAU,EA8BP,OA7BH,EAAiB,WACnB,EAAU,GAA+D,IAApD,EAAiB,MAAM,WAAW,OAAO,QAGhC,MAA9B,EAAiB,WACiB,iBAA3B,EAAiB,QAExB,EACE,GAAW,EAAiB,MAAM,OAAS,EAAiB,WAGhC,MAA9B,EAAiB,WACiB,iBAA3B,EAAiB,QAExB,EACE,GAAW,EAAiB,MAAM,OAAS,EAAiB,WAGtC,MAAxB,EAAiB,KACiB,iBAA3B,EAAiB,QAExB,EAAU,GAAW,EAAiB,MAAQ,EAAiB,KAGvC,MAAxB,EAAiB,KACiB,iBAA3B,EAAiB,QAExB,EAAU,GAAW,EAAiB,MAAQ,EAAiB,KAE1D,EAET,SAAS,EAAS,EAAQ,EAAY,GAC9B,IAAA,EAAe,EAAW,MAQzB,MAPmC,CACxC,cAAc,EACd,IAAG,WAEM,OADS,EAAa,KAAK,QAOzB,IAAA,EAAA,WAKX,SAAA,EAAA,EACA,EACA,EACA,GAAqB,EAAA,KAAA,GAEhB,KAAA,aAAe,SAAS,eAC3B,GAEG,KAAA,SAAW,SAAS,eAAe,GAClC,IAAA,EAAe,SAAS,WAAW,KAAK,aAAa,SAAS,GAC/D,KAAA,QAAU,EAAa,kBACxB,IACG,KAAA,QAAQ,GAAK,GAEf,KAAA,OAAO,GAuQhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SArQU,MAAA,SAAO,GACR,KAAA,SAAS,sBACZ,EAAgB,aAAe,YAC/B,KAAK,aAkQX,EA1Re,GAgCT,EAAA,WAMgB,SAAA,EAAA,GAA2B,IAAA,EAAA,KAAA,EAAA,KAAA,GAA3B,KAAA,KAAA,EAEb,KAAA,aAAe,SAAS,eAC3B,gBAEG,KAAA,SAAW,SAAS,eAAe,OACnC,KAAA,iBAAmB,GAClB,IAAA,EAAe,SAAS,WAAW,KAAK,aAAa,SAAS,GAC/D,KAAA,QAAU,EAAa,kBACvB,KAAA,QAAQ,GAAQ,GAAA,OAAA,KAAK,KAA1B,aACA,EAAa,YAAY,SAAC,GAClB,IAAA,EAAmB,EAAS,OAAO,SAAC,GACpC,MAAc,WAAd,EAAK,KACA,EAAI,SAAW,EAAc,OAE7B,EAAI,SAAW,EAAc,WAGxC,EAAK,iBAAmB,EACxB,EAAK,mBAEF,KAAA,SACA,KAAA,gBA8NT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,iBA5NU,MAAA,WACA,IAAA,EAAS,SAAS,eACnB,GAAA,OAAA,KAAK,KADV,mBAGA,EAAO,UAAY,GACG,IALF,EAKE,EAAA,EAAA,KAAK,kBALP,IAKyB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAlC,IAAA,EAAkC,EAAA,MACrC,EAAW,SAAS,cAAc,MACxC,EAAS,YAAc,EAAQ,MAC/B,EAAO,YAAY,IARD,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OA4NxB,CAAA,IAAA,gBAhNU,MAAA,WACA,IAAA,EAAY,GAAA,OAAA,KAAK,KAAvB,kBACK,KAAA,QAAQ,cAAc,MAAO,GAAK,EAClC,KAAA,QAAQ,cAAc,MAAO,YAChC,KAAK,KAAK,cAAgB,cA4MhC,CAAA,IAAA,SA1MU,MAAA,WACD,KAAA,SAAS,sBAAsB,YAAa,KAAK,aAyM1D,EA1PM,GAqDA,EAAA,SAAA,GAqMN,EAAA,EApMU,GAoMV,IAAA,EAAA,EAAA,GA1Lc,SAAA,EAAA,EAAgB,GAAgB,IAAA,EAAA,OAAA,EAAA,KAAA,IACpC,EAAA,EAAA,KAAA,KAAA,iBAAkB,GAAQ,EAAO,EAAQ,KAC1C,QAAU,EAEV,EAAA,YACA,EAAA,gBALqC,EA0L9C,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAjME,IAAA,WACM,OAAwB,IAAxB,KAAK,QAAQ,OACR,WAEG,GAAA,OAAA,KAAK,QAAQ,OAAvB,eA6LN,CAAA,IAAA,mBAjLE,MAAA,SAAiB,GACf,QAAQ,IAAI,GACZ,EAAM,aAAc,QAAQ,aAAc,KAAK,QAAQ,IACvD,EAAM,aAAc,cAAgB,SA8KxC,CAAA,IAAA,iBA5KE,MAAA,SAAe,GACb,QAAQ,IAAI,aA2KhB,CAAA,IAAA,YAzKE,MAAA,WACO,KAAA,QAAQ,iBAAiB,YAAa,KAAK,kBAC3C,KAAA,QAAQ,iBAAiB,UAAW,KAAK,kBAuKlD,CAAA,IAAA,gBAnKE,MAAA,WACO,KAAA,QAAQ,cAAc,MAAO,YAAc,KAAK,QAAQ,MACxD,KAAA,QAAQ,cAAc,MAAO,YAAc,KAAK,QAAU,YAC1D,KAAA,QAAQ,cAAc,KAAM,YAAc,KAAK,QAAQ,gBAgKhE,EArMM,GAoBJ,EAAA,CADC,GACD,EAAA,UAAA,mBAAA,MAoBI,IAAA,EAAA,SAAA,GA6JN,EAAA,EA7J0B,GA6J1B,IAAA,EAAA,EAAA,GA1JsB,SAAA,EAAA,GAA2B,IAAA,EAAA,OAAA,EAAA,KAAA,IACvC,EAAA,EAAA,KAAA,KAAA,eAAgB,OAAO,EAAU,GAAA,OAAA,EAAvC,eADkB,KAAA,EAEb,EAAA,iBAAmB,GAEnB,EAAA,YACA,EAAA,gBALwC,EA0JjD,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAnJE,MAAA,WAAS,IAAA,EAAA,KACF,KAAA,QAAQ,iBAAiB,WAAY,KAAK,iBAC1C,KAAA,QAAQ,iBAAiB,YAAa,KAAK,kBAC3C,KAAA,QAAQ,iBAAiB,OAAQ,KAAK,aAC3C,EAAa,YAAY,SAAC,GAClB,IAAA,EAAmB,EAAS,OAAO,SAAC,GACpC,MAAc,WAAd,EAAK,KAEA,EAAI,SAAW,EAAc,OAE/B,EAAI,SAAW,EAAc,WAEtC,EAAK,iBAAmB,EACxB,EAAK,qBAsIX,CAAA,IAAA,gBAnIE,MAAA,WACQ,IAAA,EAAY,GAAA,OAAA,KAAK,KAAvB,kBACK,KAAA,QAAQ,cAAc,MAAO,GAAK,EAClC,KAAA,QAAQ,cAAc,MAAO,YAChC,KAAK,KAAK,cAAgB,cA+HhC,CAAA,IAAA,kBA5HE,MAAA,SAAgB,GACV,EAAM,cAAgD,eAAhC,EAAM,aAAa,MAAM,KACjD,EAAM,iBACS,KAAK,QAAQ,cAAc,MACnC,UAAU,IAAI,gBAwH3B,CAAA,IAAA,cAnHE,MAAA,SAAY,GACJ,IAAA,EAAQ,EAAM,aAAc,QAAQ,cAC1C,EAAa,YACX,EACc,WAAd,KAAK,KAAoB,EAAc,OAAS,EAAc,YA+GpE,CAAA,IAAA,mBA3GE,MAAA,SAAiB,GACA,KAAK,QAAQ,cAAc,MACnC,UAAU,OAAO,eAyG5B,CAAA,IAAA,iBAvGU,MAAA,WACS,SAAS,eACnB,GAAA,OAAA,KAAK,KADV,mBAGO,UAAY,GACG,IALF,EAKE,EAAA,EAAA,KAAK,kBALP,IAKyB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAlC,IAAA,EAAkC,EAAA,MACvC,IAAA,EAAY,KAAK,QAAQ,cAAc,MAAO,GAAI,IANpC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,SAuGxB,EA7JM,GAiCJ,EAAA,CADC,GACD,EAAA,UAAA,kBAAA,MASA,EAAA,CADC,GACD,EAAA,UAAA,cAAA,MAQA,EAAA,CADC,GACD,EAAA,UAAA,mBAAA,MAgBI,IAAA,EAAA,SAAA,GA2FN,EAAA,EA3F2B,GA2F3B,IAAA,EAAA,EAAA,GAnFE,SAAA,IAAA,IAAA,EAAA,OAAA,EAAA,KAAA,IACQ,EAAA,EAAA,KAAA,KAAA,gBAAiB,OAAO,EAAM,eAW/B,UAAY,EAAK,QAAQ,cAAc,UACvC,EAAA,gBAAkB,EAAK,QAAQ,cAClC,gBAEG,EAAA,WAAa,EAAK,QAAQ,cAAc,WACxC,EAAA,YAjBP,EAmFF,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAhEE,MAAA,WACO,KAAA,QAAQ,iBAAiB,SAAU,KAAK,iBA+DjD,CAAA,IAAA,gBA7DE,MAAA,cA6DF,CAAA,IAAA,QA5DU,MAAA,WACA,KAAA,UAAU,MAAQ,GACrB,KAAK,gBAAgB,MAAQ,GAC7B,KAAK,WAAW,MAAQ,KAyD/B,CAAA,IAAA,kBAvDU,MAAA,WACA,IAAA,EAAa,KAAK,UAAU,MAC5B,EAAuB,KAAK,gBAAgB,MAC5C,EAAkB,KAAK,WAAW,MAMlC,EAAoC,CACxC,MAAO,EACP,UAAU,EACV,UAAW,GAEP,EAAgC,CACpC,OAAQ,EACR,UAAU,EACV,IAAK,GAGL,OAAC,EAfkC,CACnC,MAAO,EACP,UAAU,KAcT,EAAS,IACT,EAAS,GAKH,CAAC,EAAY,GAAuB,QAH3C,MAAM,WA+BZ,CAAA,IAAA,gBAvBU,MAAA,SAAc,GACpB,EAAM,iBACN,QAAQ,IAAI,cAAY,KAAK,UAAU,OACjC,IAAA,EAAY,KAAK,kBAMnB,GAAA,MAAM,QAAQ,GAAY,CACE,IAAA,EAAA,EAAA,EAA9B,GAAO,EAAP,EAAA,GAAc,EAAd,EAAA,GAAoB,EAApB,EAAA,GACA,EAAa,WAAW,EAAO,EAAM,GAChC,KAAA,aAWX,EA3FM,GAoEJ,EAAA,CADC,GACD,EAAA,UAAA,gBAAA,MAoBF,IAAM,EAAW,IAAI,EAEf,EAAoB,IAAI,EAAY,UACpC,EAAsB,IAAI,EAAY","file":"app.316c3282.js","sourceRoot":"..","sourcesContent":["// Drag & Drop Interfaces\r\ninterface Draggable {\r\n  dragStartHandler(event: DragEvent): void;\r\n  dragEndHandler(event: DragEvent): void;\r\n}\r\n\r\ninterface DragTarget {\r\n  dragOverHandler(event: DragEvent): void;\r\n  dropHandler(event: DragEvent): void;\r\n  dragLeaveHandler(event: DragEvent): void;\r\n}\r\n// Project Type\r\nenum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\nclass Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public people: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n\r\n// Project State Management\r\ntype Listener<T> = (items: T[]) => void;\r\n// Project State Management\r\nclass State<T> {\r\n  protected listeners: Listener<T>[] = [];\r\n\r\n  addListener(listenerFn: Listener<T>) {\r\n    this.listeners.push(listenerFn);\r\n  }\r\n}\r\nclass ProjectState extends State<Project> {\r\n  private projects: Project[] = [];\r\n  private static instance: ProjectState;\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  addProject(title: string, description: string, numOfPeople: number) {\r\n    const newProject = new Project(\r\n      Math.random().toString(),\r\n      title,\r\n      description,\r\n      numOfPeople,\r\n      ProjectStatus.Active\r\n    );\r\n    this.projects.push(newProject);\r\n    // for (const listenerFn of this.listeners) {\r\n    //   listenerFn(this.projects.slice());\r\n    // }\r\n    this.updateListeners();\r\n\r\n  }\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find(prj => prj.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n  \r\n  private updateListeners() {\r\n    for (const listenerFn of this.listeners) {\r\n      listenerFn(this.projects.slice());\r\n    }\r\n  }\r\n}\r\nconst projectState = ProjectState.getInstance();\r\n\r\n//validation\r\ninterface Validation {\r\n  value: string | number;\r\n  required?: boolean; // boolean or undefined\r\n  minlength?: number;\r\n  maxlength?: number;\r\n  min?: number;\r\n  max?: number;\r\n}\r\nfunction validate(ValidatableInput: Validation) {\r\n  let isValid = true;\r\n  if (ValidatableInput.required) {\r\n    isValid = isValid && ValidatableInput.value.toString().trim().length !== 0;\r\n  }\r\n  if (\r\n    ValidatableInput.minlength != null &&\r\n    typeof ValidatableInput.value === 'string'\r\n  ) {\r\n    isValid =\r\n      isValid && ValidatableInput.value.length > ValidatableInput.minlength;\r\n  }\r\n  if (\r\n    ValidatableInput.maxlength != null &&\r\n    typeof ValidatableInput.value === 'string'\r\n  ) {\r\n    isValid =\r\n      isValid && ValidatableInput.value.length < ValidatableInput.maxlength;\r\n  }\r\n  if (\r\n    ValidatableInput.min != null &&\r\n    typeof ValidatableInput.value === 'number'\r\n  ) {\r\n    isValid = isValid && ValidatableInput.value > ValidatableInput.min;\r\n  }\r\n  if (\r\n    ValidatableInput.max != null &&\r\n    typeof ValidatableInput.value === 'number'\r\n  ) {\r\n    isValid = isValid && ValidatableInput.value < ValidatableInput.max;\r\n  }\r\n  return isValid;\r\n}\r\nfunction autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  const originMethod = descriptor.value;\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      const boundFn = originMethod.bind(this);\r\n      return boundFn;\r\n    },\r\n  };\r\n  return adjDescriptor;\r\n}\r\n// Component\r\nabstract class Component<T extends HTMLElement, U extends HTMLElement> {\r\n  templateElem: HTMLTemplateElement;\r\n  hostElem: T;\r\n  element: U;\r\n  constructor(\r\n    templateId: string,\r\n    hostElemId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    this.templateElem = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement;\r\n    this.hostElem = document.getElementById(hostElemId)! as T;\r\n    const importedNode = document.importNode(this.templateElem.content, true);\r\n    this.element = importedNode.firstElementChild as U;\r\n    if (newElementId) {\r\n      this.element.id = newElementId;\r\n    }\r\n    this.attach(insertAtStart);\r\n  }\r\n  private attach(insertAtStart: boolean) {\r\n    this.hostElem.insertAdjacentElement(\r\n      insertAtStart ? 'afterbegin' : 'beforeend',\r\n      this.element\r\n    );\r\n  }\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n}\r\n\r\n// Project list\r\nclass ProjectList2 {\r\n  templateElem: HTMLTemplateElement;\r\n  hostElem: HTMLDivElement;\r\n  element: HTMLElement;\r\n  assignedProjects: any[];\r\n\r\n  constructor(private type: 'active' | 'finished') {\r\n    //point to project list\r\n    this.templateElem = document.getElementById(\r\n      'project-list'\r\n    )! as HTMLTemplateElement;\r\n    this.hostElem = document.getElementById('app')! as HTMLDivElement;\r\n    this.assignedProjects = [];\r\n    const importedNode = document.importNode(this.templateElem.content, true);\r\n    this.element = importedNode.firstElementChild as HTMLElement;\r\n    this.element.id = `${this.type}-projects`;\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === 'active') {\r\n          return prj.status === ProjectStatus.Active;\r\n        } else {\r\n          return prj.status === ProjectStatus.Finished;\r\n        }\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n    this.attach();\r\n    this.renderContent();\r\n  }\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n    listEl.innerHTML = '';\r\n    for (const prjItem of this.assignedProjects) {\r\n      const listItem = document.createElement('li');\r\n      listItem.textContent = prjItem.title;\r\n      listEl.appendChild(listItem);\r\n    }\r\n  }\r\n\r\n  private renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector('ul')!.id = listId;\r\n    this.element.querySelector('h2')!.textContent =\r\n      this.type.toUpperCase() + ' PROJECTS';\r\n  }\r\n  private attach() {\r\n    this.hostElem.insertAdjacentElement('beforeend', this.element);\r\n  }\r\n}\r\n// ProjectItem Class\r\nclass ProjectItem\r\n  extends Component<HTMLUListElement, HTMLLIElement>\r\n  implements Draggable {\r\n  private project: Project;\r\n  get persons() {\r\n    if (this.project.people === 1) {\r\n      return '1 person';\r\n    } else {\r\n      return `${this.project.people} persons `;\r\n    }\r\n  }\r\n  constructor(hostId: string, project: Project) {\r\n    super('single-project', hostId, false, project.id);\r\n    this.project = project;\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @autobind\r\n  dragStartHandler(event: DragEvent) {\r\n    console.log(event);\r\n    event.dataTransfer!.setData('text/plain', this.project.id);\r\n    event.dataTransfer!.effectAllowed = 'move';\r\n  }\r\n  dragEndHandler(_: DragEvent) {\r\n    console.log('DragEnd');\r\n  }\r\n  configure() {\r\n    this.element.addEventListener('dragstart', this.dragStartHandler);\r\n    this.element.addEventListener('dragend', this.dragEndHandler);\r\n  }\r\n\r\n\r\n  renderContent() {\r\n    this.element.querySelector('h2')!.textContent = this.project.title;\r\n    this.element.querySelector('h3')!.textContent = this.persons + ' assigned';\r\n    this.element.querySelector('p')!.textContent = this.project.description;\r\n  }\r\n}\r\nclass ProjectList extends Component<HTMLDivElement, HTMLElement> implements DragTarget {\r\n  assignedProjects: Project[];\r\n\r\n  constructor(private type: 'active' | 'finished') {\r\n    super('project-list', 'app', false, `${type}-projects`);\r\n    this.assignedProjects = [];\r\n    //point to project list\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n  configure() {\r\n    this.element.addEventListener('dragover', this.dragOverHandler);\r\n    this.element.addEventListener('dragleave', this.dragLeaveHandler);\r\n    this.element.addEventListener('drop', this.dropHandler);\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === 'active') {\r\n          // should be return instead of passing the value\r\n          return prj.status === ProjectStatus.Active;\r\n        }\r\n        return prj.status === ProjectStatus.Finished;\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n  }\r\n  renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector('ul')!.id = listId;\r\n    this.element.querySelector('h2')!.textContent =\r\n      this.type.toUpperCase() + ' PROJECTS';\r\n  }\r\n  @autobind\r\n  dragOverHandler(event: DragEvent) {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\r\n      event.preventDefault();\r\n      const listEl = this.element.querySelector('ul')!;\r\n      listEl.classList.add('droppable');\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  dropHandler(event: DragEvent) {\r\n    const prjId = event.dataTransfer!.getData('text/plain');\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n  @autobind\r\n  dragLeaveHandler(_: DragEvent) {\r\n    const listEl = this.element.querySelector('ul')!;\r\n    listEl.classList.remove('droppable');\r\n  }\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n    listEl.innerHTML = '';\r\n    for (const prjItem of this.assignedProjects) {\r\n      new ProjectItem(this.element.querySelector('ul')!.id, prjItem);\r\n    }\r\n  }\r\n}\r\n\r\n//Input\r\nclass ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\r\n  // templateElem : HTMLTemplateElement;\r\n  // hostElem : HTMLDivElement;\r\n  // element : HTMLFormElement;\r\n  titleElem: HTMLInputElement;\r\n  descriptionElem: HTMLInputElement;\r\n  peopleElem: HTMLInputElement;\r\n\r\n  constructor() {\r\n    super('project-input', 'app', true, 'user-input');\r\n    // const templateEl = document.getElementById('project-inpiut');\r\n    // if(templateEl) {\r\n    //     this.templateElem = this.templateEl;\r\n    // }\r\n    // this.templateElem = document.getElementById('project-input')! as HTMLTemplateElement;\r\n    // this.hostElem = document.getElementById('app')! as HTMLDivElement;\r\n\r\n    // const importedNode = document.importNode(this.templateElem.content, true);\r\n    // this.element = importedNode.firstElementChild as HTMLFormElement;\r\n    // this.element.id = 'user-input';\r\n    this.titleElem = this.element.querySelector('#title') as HTMLInputElement;\r\n    this.descriptionElem = this.element.querySelector(\r\n      '#description'\r\n    ) as HTMLInputElement;\r\n    this.peopleElem = this.element.querySelector('#people') as HTMLInputElement;\r\n    this.configure();\r\n  }\r\n  configure() {\r\n    this.element.addEventListener('submit', this.submitHandler);\r\n  }\r\n  renderContent() {}\r\n  private clear() {\r\n    (this.titleElem.value = ''),\r\n      (this.descriptionElem.value = ''),\r\n      (this.peopleElem.value = '');\r\n  }\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enterTitle = this.titleElem.value;\r\n    const enterDescriptionElem = this.descriptionElem.value;\r\n    const enterPeopleElem = this.peopleElem.value;\r\n    // if(enterTitle.trim().length === 0 || enterDescriptionElem.trim().length === 0|| enterPeopleElem.trim().length === 0) {\r\n    const titleValidatable: Validation = {\r\n      value: enterTitle,\r\n      required: true,\r\n    };\r\n    const descritionValidatable: Validation = {\r\n      value: enterDescriptionElem,\r\n      required: true,\r\n      minlength: 5,\r\n    };\r\n    const peopleValidatable: Validation = {\r\n      value: +enterPeopleElem,\r\n      required: true,\r\n      min: 3,\r\n    };\r\n    if (\r\n      !validate(titleValidatable) ||\r\n      !validate(descritionValidatable) ||\r\n      !validate(peopleValidatable)\r\n    ) {\r\n      alert('wrong');\r\n      return;\r\n    } else {\r\n      return [enterTitle, enterDescriptionElem, +enterPeopleElem];\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    console.log('test -->', this.titleElem.value);\r\n    const userInput = this.gatherUserInput();\r\n    // if (Array.isArray(userInput)) {\r\n    //     const [title, desc, people] = userInput\r\n    //     console.log(\"title - desc - people\", title, desc, people)\r\n    //     this.clear();\r\n    // }\r\n    if (Array.isArray(userInput)) {\r\n      const [title, desc, people] = userInput;\r\n      projectState.addProject(title, desc, people);\r\n      this.clear();\r\n    }\r\n  }\r\n  // private configure() {\r\n  //     this.element.addEventListener('submit', this.submitHandler.bind(this))\r\n  // }\r\n}\r\n\r\nconst newInput = new ProjectInput();\r\n//you can use ProjectList2('active')\r\nconst activeProjectList = new ProjectList('active');\r\nconst finishedProjectList = new ProjectList('finished');\r\n"]}